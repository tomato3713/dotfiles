" Last Change: 09/01/2020 - 22:25:12.
" Maintainer: Watanabe Taichi <weasel.wt(at)outlook.com>

" ### Initialization ###
" in shell setting file, for example .bashrc or .cshrc
" setenv $VIMRUNTIME ~/vim/vim/runtime
" set runtimepath+=~/.vim

set all&
augroup MyAutoCmd
    autocmd!
augroup END

" #### encoding #### {{{
set encoding=utf-8
scriptencoding=utf-8
" 文字コードの自動認識
set fileencodings=utf-8,utf-16,cp932,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac
" ファイルに保存される文字エンコーディング
set fileencoding=utf-8
set fileformat=unix
" テキスト挿入中の自動折り返しを日本語に対応させる
" auto comment off
autocmd MyAutoCmd FileType * setlocal formatoptions=tcqmM
" Use Unix format end-of-line on Windows and replace \ to slash
set viewoptions=unix,slash
set helplang=en,ja
" }}}

" #### Bells ####
set t_vb=
set visualbell
set noerrorbells

" #### Buffer Style ####
set number
set ambiwidth=double
set synmaxcol=200
set nrformats=alpha,hex,bin
set nohlsearch

" faster redraw
set lazyredraw
set ttyfast
set updatetime=250

" disable indent plugin each file type
filetype plugin indent off
set t_Co=256

if has('termguicolors')
    set termguicolors
    let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
endif

set incsearch
set ignorecase
set smartcase
set showmatch

" ファイル内容が変更されると自動読み込みする
set autoread
set switchbuf=useopen
autocmd MyAutoCmd WinEnter * checktime

if has('persistent_undo')
    if !isdirectory(expand('$HOME/.vim/.undo'))
        call mkdir(expand('$HOME/.vim/.undo'), 0700)
    endif
    set undodir=$HOME/.vim/.undo
    set undofile
endif

" vimの無名レジスタとOSのクリップボードを連携させる
if has('clipboard')
    set clipboard=unnamed,autoselect
endif

set viminfo='50,/50,:25,n$HOME/.vim/viminfo
set nobackup
set noswapfile
set nolist
set nowrap
set textwidth=0
" 長い行を@にさせない
set display=lastline
set scrolloff=10
set showcmd

" #### Indent #### {{{
set autoindent   " 新しい行のインデントを継続する
set expandtab    " tab to space
set tabstop=4    " 画面上でタブ文字の占める幅
set shiftwidth=4 " 自動インデントでずれる幅
set smartindent  " 折り返しの際にインデントを考慮
set breakindent
" }}}

" enable mouse
if has('mouse')
    set mouse=a
    if has('mouse_sgr')
        set ttymouse=sgr
    elseif v:version > 703 || v:version is 703 && has('patch632')
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    endif
endif

" #### Command #### {{{
" the count of command history
set cmdheight=1
set history=2000
" いろんなコマンドの後にカーソルを先頭に移動させない
set nostartofline
" Rename current file
command! -nargs=1 -complete=file Rename call rename(expand('%'), '<args>') | e <args>
" }}}

" Keyword highlight ex. TODO:, NOTE:, REF:, TEMP:
augroup HilightsForce
    autocmd!
    autocmd WinEnter,BufRead,BufNew,Syntax * :silent! call matchadd('Todo', '\(TODO\|NOTE\|REF\|TEMP\):')
    " autocmd WinEnter,BufRead,BufNew,Syntax * highlight Todo guibg=#000124 guifg=#000015
augroup END

" ### completion ### {{{
set wildmenu wildmode=longest:full
set completeopt=menu,preview
" Wait key time
set timeout ttimeoutlen=100
set spell
set spelllang+=cjk " 日本語をスペルチェックの対象 から除外する
" When press Ctrl + L while am typing, the previous spelling mistake is
" corrected.
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u
" dictionary Complete
set dictionary=$HOME/.vim/dict/programming.dict
" }}}

" ### key mapping ### {{{
" Vim は以下のキーを同一視する.
" <C-i> == <Tab>
" <C-m> == <Enter>
" <C-[> == <ESC>

" change Leader key to Space key
let mapleader = "\<Space>"
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
nnoremap ZQ <Nop>
" when tap :wq, make not save and close if buffer is no difference before
cnoremap wq x
" }}}

" ### Plugins ### {{{
" automated install vim-plug
if !filereadable(expand('$HOME/.vim/autoload/plug.vim'))
    let s:vim_plug_url='https://github.com/junegunn/vim-plug'
    call system('git clone ' . s:vim_plug_url . ' ' . $HOME . '/.vim/autoload/')
endif

call plug#begin('~/.vim/plugged')
" #### Help Documents ####
Plug 'vim-jp/vimdoc-ja'

" #### Filer ####
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1
Plug 'iberianpig/ranger-explorer.vim'

" #### Color scheme ####
Plug 'cocopon/iceberg.vim', {'do': 'cp colors/* ~/.vim/colors/'}
Plug 'altercation/solarized', {'do': 'cp vim-colors-solarized/colors/* ~/.vim/colors/'}
let g:solarized_termcolors=256
Plug 'junegunn/seoul256.vim'
" Range:   233 (darkest) ~ 239 (lightest), default: 237
let g:seoul256_background = 234

" #### Text editing Utilities ####
Plug 'itchyny/vim-cursorword'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-surround'
Plug 'AndrewRadev/switch.vim'
Plug 'tpope/vim-repeat'
Plug 'jiangmiao/auto-pairs'
autocmd MyAutoCmd Filetype markdown,tex let b:autopairs_loaded=1
Plug 'andymass/vim-matchup'
Plug 'junegunn/fzf', { 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'ntpeters/vim-better-whitespace'
Plug 'skanehira/translate.vim'
Plug 'glidenote/memolist.vim'
Plug 'junegunn/vim-easy-align'
Plug 'vim-scripts/autodate.vim',
let autodate_format='%d/%m/%Y\ -\ %H:%M:%S'
Plug 'fuenor/JpFormat.vim',

" #### Runner ####
Plug 'thinca/vim-quickrun'

" #### Debugger Supports ####
packadd termdebug

" #### Status Line ####
Plug 'itchyny/vim-gitbranch'
Plug 'itchyny/lightline.vim'

" #### textlint For Natural Language ####
" npm install textlint -g
Plug 'heavenshell/vim-textlint'
Plug 'dannyob/quickfixstatus'
Plug 'cohama/vim-hier'

" #### template ####
Plug 'mattn/sonictemplate-vim'
Plug 'mopp/layoutplugin.vim'

" #### Snippet ####
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'

" #### Language Server Protocol Client ####
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

" #### General Languages Supports ####
Plug 'sheerun/vim-polyglot'

" #### HTML/CSS Supports ####
Plug 'mattn/emmet-vim'

" #### Python Supports ####
Plug 'prakashdanish/vimport', { 'for': 'python' } " :Vimport and :Vimdrop"

" #### Golang Supports ####
Plug 'mattn/vim-goimports'

" #### Lisp Supports ####
Plug 'kovisoft/slimv'
let g:slimv_swank_cmd = "!ros -e '(ql:quickload :swank) (swank:create-server)' wait &"
let g:slimv_lisp = 'ros run'
let g:slimv_impl = 'sbcl'

" #### Markdown Supports ####
Plug 'skanehira/preview-markdown.vim'
let g:preview_markdown_vertical = 1

" #### LaTeX/TeX Supports ####
Plug 'lervag/vimtex'
" disable conceal for LaTeX/TeX
let g:tex_conceal=''
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0

" #### CSV Supports ####
Plug 'luochen1990/rainbow'
Plug 'mechatroner/rainbow_csv'
let g:rainbow_active=1 "0 if you want to enable it later via :RainbowToggle

" Draw image and play music
Plug 'thinca/vim-painter'
call plug#end()
call map(sort(split(globpath('$HOME/.vim', 'settings/*.vim'))), {->[execute('exec "so" v:val')]})
" }}}

" ### Last Configuration ###
" should write last line {{{
filetype plugin indent on
" syntax on の場合は、現在の色設定を変更する.また、syntax on, syntax enable は
" , runtimepath に含まれている設定をもとにシンタックスを生成しようとするため,
" runtimepath を設定し終えた後に設定するべき.
syntax enable
colorscheme seoul256
set secure
" }}}
