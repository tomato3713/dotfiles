[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
colorscheme onedark
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'obaland/vfiler.vim'
hook_add = '''
lua << EOF
require('vfiler/config').setup {
    options = {
        auto_resize = true,
        name = 'explorer',
        columns = 'indent,icon,name,git,mode,size,time,space',
        git = { enabled = true, untracked = true, ignored = true },
        width = 30,
    },
}
EOF

nnoremap <silent><Leader>e <Cmd>VFiler -layout=none<CR>
nnoremap <silent><Leader>E <Cmd>VFiler -layout=left<CR>
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'folke/which-key.nvim'
hook_add = '''
lua << EOF
require('which-key').setup {}
EOF
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <plug>(caw:zeropos:toggle)
vmap <Leader>c <plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
nmap <space>v :Vista nvim_lsp<CR>
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
"ddu settings.

call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [{'name':'file','params':{}},{'name':'mr'},{'name':'register'},{'name':'buffer'}],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \ })

"ddu-key-setting
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  nnoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  inoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  inoremap <buffer> <C-j>
  \ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')+1,0)")<CR>
  inoremap <buffer> <C-k>
  \ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')-1,0)")<CR>
endfunction

"ddu keymapping.
nnoremap <SID>[ug] <Nop>
nmap ,u <SID>[ug]

"show history list
nnoremap <silent> <SID>[ug]m :<C-u>Ddu mr<CR>
"show buffer list
nnoremap <silent> <SID>[ug]b :<C-u>Ddu buffer<CR>
"show register list
nnoremap <silent> <SID>[ug]r :<C-u>Ddu register<CR>
"create new file
nnoremap <silent> <SID>[ug]n :<C-u>Ddu file -source-param-new -volatile<CR>
"show file list
nnoremap <silent> <SID>[ug]f :<C-u>Ddu file<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
[[plugins]]
repo = 'Shougo/ddu-source-file'
[[plugins]]
repo = 'Shougo/ddu-source-register'
[[plugins]]
repo = 'kuuote/ddu-source-mr'
[[plugins]]
repo = 'lambdalisue/mr.vim'
[[plugins]]
repo = 'shun/ddu-source-buffer'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo = 'Shougo/ddu-commands.vim'
[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = '~/repos/dps-joplin'
hook_add = '''
let g:joplin_token = $JOPLIN_TOKEN
let g:joplin_debug = v:true
'''
