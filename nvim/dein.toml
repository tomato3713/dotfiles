[[plugins]]
repo = 'Shougo/dein.vim'

# --- Framework ---
[[plugins]]
repo = 'vim-denops/denops.vim'

# --- Colorscheme
[[plugins]]
repo = 'joshdick/onedark.vim'
# hook_add = '''
#  colorscheme onedark
# '''

[[plugins]]
repo = 'fenetikm/falcon'
hook_add = '''
colorscheme falcon
'''

[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_source = '''
require('notify').setup({
  background_colour = "#000000"
})
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'
lua_source = '''
require('dressing').setup()
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_source = '''
let g:deol#custom_map = #{
  \   edit: 'e',
  \   start_insert: 'i',
  \   start_insert_first: 'I',
  \   start_append: 'a',
  \   start_append_last: 'A',
  \   execute_line: '<CR>',
  \   previous_prompt: '<C-p>',
  \   next_prompt: '<C-n>',
  \   paste_prompt: '<C-y>',
  \   bg: '<C-z>',
  \   quit: 'q',
  \ }

" Should set g:deol#prompt_pattern.
let g:deol#prompt_pattern = has('win32') ? '\f\+>' : '\w*% \?'
'''

# --- Rich Help ---
[[plugins]]
repo = 'folke/which-key.nvim'
lua_source = '''
require('which-key').setup {}
'''

# --- Faster UI Controll ---
[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
lua_source = '''
require('nvim-web-devicons').setup()
'''

# --- Rich Text Edit ---
[[plugins]]
repo = 'karb94/neoscroll.nvim'
lua_source = '''
require('neoscroll').setup()
'''

[[plugins]]
repo = 'rgroli/other.nvim'
lua_source = '''
require('rc.other-nvim')
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
lua_source = '''
require('treesitter-context').setup({ enable = false })
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'echasnovski/mini.nvim'
lua_source = '''
require('rc.mini')
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
# use treesitter to autoclose and autorename html tag
repo = 'windwp/nvim-ts-autotag'
lua_source = '''
require('nvim-ts-autotag').setup()
'''

# --- Search ---
[[plugins]]
repo = 'lambdalisue/kensaku.vim'

[[plugins]]
repo = 'lambdalisue/kensaku-search.vim'
hook_add = '''
cnoremap <CR> <Plug>(kensaku-search-replace)<CR>
'''

# --- Script Quick Runner ---
[[plugins]]
repo = 'thinca/vim-quickrun'

# --- Git ---
# [[plugins]]
# repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
lua_source = '''
require('rc.gitsigns')
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_source = '''
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    endif

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

[[plugins]]
repo = 'ruifm/gitlinker.nvim'
depends = 'nvim-lua/plenary.nvim'
lua_source = '''
require('rc.gitlinker')
'''

# --- Docker ---
[[plugins]]
repo = 'skanehira/denops-docker.vim'

# --- Rich Syntax Highlight ---
# highlighting other uses of the word under the cursor
[[plugins]]
repo = 'RRethy/vim-illuminate'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
depends = ['nvim-ts-context-commentstring']
merged = 0
hook_post_update = 'TSUpdate'
lua_source = '''
require'nvim-treesitter.configs'.setup {
    ensure_installed = { "go", "c", "cpp", "markdown", "toml", "tsx", "json", "css", "lua", "yaml" },
    sync_install = false, -- install languages synchronously (only applied to `ensure_installed`)
    highlight = {
        enable = true,              -- false will disable the whole extension
        disable = { "vim" },  -- list of language that will be disabled
        additional_vim_regex_highlighting = false,
    },
    indent = {
        enable = true,
    },
    context_commentstring = {
        enable = true,
        enable_autocmd = false,
    },
}
'''

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'

# --- File Exploer
[[plugins]]
repo = 'tomato3713/hijack-open-directory.nvim'

[[plugins]]
repo = 'obaland/vfiler.vim'
depends = ['hijack-open-directory.nvim']
lua_add = '''
-- Disable embeded plugins.
vim.api.nvim_set_var('loaded_netrwPlugin', 1)

require('hijack_open_directory').setup({
     filer = function(path) require('vfiler').start(path, {noremap = true, silent = true }) end
})

local opts = { noremap=true, silent=true }
--- open filer in window
vim.keymap.set('n', '<Leader>E', '<Cmd>VFiler -layout=none<CR>', opts)
--- " open filer in side tab
vim.keymap.set('n', '<Leader>e', '<Cmd>VFiler -layout=left<CR>', opts)
'''
lua_source = '''
--- Support operation two buffers file explorer
local action = require('vfiler/action')
require('vfiler/config').setup {
    options = {
        auto_resize = true,
        keep = true,
        name = 'explorer',
        columns = 'indent,icon,name,git',
        iconstring = '-',
        git = { enabled = true, untracked = true, ignored = true },
        width = 34,
        listed = false,
    },
    mappings = {
        ['<C-l>'] = action.reload,
        ['<C-s>'] = action.toggle_sort,
        ['N'] = action.new_file,
        ['K'] = action.new_directory,
        ['s'] = action.open_by_split,
        ['v'] = action.open_by_vsplit,
    },
}
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
" Support LSP
nmap <space>v :Vista nvim_lsp<CR>
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
lua_source = '''
local ddu_helper = require('rc.ddu')
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
hook_source = '''
autocmd FileType ddu-ff call s:ddu_ff_my_settings()
function! s:ddu_ff_my_settings() abort
  nnoremap <buffer><silent> q       <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer><silent> <CR>    <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space> <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> f       <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> p       <Cmd>call ddu#ui#ff#do_action('preview')<CR>
  nnoremap <buffer><silent> nn      <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'newNote' })<CR>
  nnoremap <buffer><silent> nt      <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'newTodo' })<CR>
  nnoremap <buffer><silent> r       <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name':  'rename' })<CR>
  nnoremap <buffer><silent> o       <Cmd>call ddu#ui#ff#do_action('expandItem', { 'mode':  'toggle' })<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_ff_filter_my_settings()
function! s:ddu_ff_filter_my_settings() abort
  inoremap <buffer><silent> <CR>  <Esc><Cmd>call ddu#ui#ff#do_action("itemAction")<CR>
  inoremap <buffer><silent> <Esc> <Esc><Cmd>call ddu#ui#ff#do_action("quit")<CR>
  inoremap <buffer><silent> <C-n> <C-o><Cmd>call ddu#ui#ff#execute("normal j")<CR>
  inoremap <buffer><silent> <C-p> <C-o><Cmd>call ddu#ui#ff#execute("normal k")<CR>
  inoremap <buffer><silent> <C-d> <C-o><Cmd>call ddu#ui#ff#execute("normal \<C-d>")<CR>
  inoremap <buffer><silent> <C-u> <C-o><Cmd>call ddu#ui#ff#execute("normal \<C-u>")<CR>
  inoremap <buffer><silent> <C-t>       <Cmd>call ddu#ui#ff#do_action('preview')<CR>
  inoremap <buffer><silent> <C-e>       <Cmd>call ddu#ui#ff#do_action('expandItem', { 'mode':    'toggle' })<CR>
endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'
[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-rg'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'
[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'
[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'
[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'
[[plugins]]
repo = '4513ECHO/ddu-source-colorscheme'
on_source = 'ddu.vim'
[[plugins]]
repo = 'lambdalisue/mr.vim'
on_source = 'ddu.vim'
[[plugins]]
on_source = 'ddu.vim'
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
on_source = 'ddu.vim'
repo = 'Milly/ddu-filter-kensaku'
[[plugins]]
on_source = 'ddu.vim'
repo = 'Shougo/ddu-commands.vim'
hook_add = '''
'''
[[plugins]]
on_source = 'ddu.vim'
repo = 'Shougo/ddu-kind-file'

# --- Asynchronous Completion Framwwork ---
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
hook_source = '''
  call ddc#custom#patch_global(#{
    \   ui: 'pum',
    \   sources: ['skkeleton', 'vsnip', 'nvim-lsp', 'around', 'file'],
    \   autoCompleteEvents: ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged', 'CmdlineEnter', 'TextChangedT' ],
    \   sourceOptions: #{
    \     _: #{
    \       ignoreCase: v:true,
    \       matchers: ['matcher_fuzzy'],
    \       sorters: ['sorter_fuzzy'],
    \       converters: ['converter_fuzzy'],
    \     },
    \     around: #{
    \       mark: 'around',
    \     },
    \     nvim-lsp: #{
    \       mark: 'lsp',
    \       forceCompletionPattern: '\.\w*|:\w*|->\w*',
    \     },
    \     vsnip: #{
    \         mark: 'snip',
    \     },
    \     skkeleton: #{
    \       mark: 'skk',
    \       matchers: ['skkeleton'],
    \       sorters: [],
    \       minAutoCompleteLength: 1,
    \       isVolatile: v:true,
    \     },
    \     file: #{
    \       mark: 'file',
    \       forceCompletionPattern: '\S/\S*',
    \       isVolatile: v:true,
    \     },
    \     cmdline: #{
    \       mark: 'cmd',
    \     },
    \     cmdline-history: #{
    \       mark: 'cmd hist',
    \     },
    \   },
    \   sourceParams: #{
    \     nvim-lsp: #{
    \       snippetEngine: denops#callback#register({
    \         body -> vsnip#anonymous(body)
    \       }),
    \       enableResolveItem: v:true,
    \       enableAdditionalTextEdit: v:true,
    \     },
    \   },
    \   cmdlineSources: {
    \     ':': ['cmdline', 'skkeleton', 'file'],
    \   },
    \ })

  inoremap <expr> <C-l> ddc#map#manual_complete()

  " terminal completion
  call ddc#enable_terminal_completion()
  " For deol buffer.
  call ddc#custom#patch_filetype(['deol'], #{
  \   specialBufferCompletion: v:true,
  \   sources: ['zsh', 'shell-history', 'around'],
  \   sourceOptions: #{
  \     _: #{
  \       keywordPattern: '[0-9a-zA-Z_./#:-]*',
  \     },
  \   },
  \ })

  " commandline completion
  nnoremap :       <Cmd>call CommandlinePre()<CR>:

  function! CommandlinePre() abort
    cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

    autocmd User DDCCmdlineLeave ++once call CommandlinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
  endfunction

  function! CommandlinePost() abort
    silent! cunmap <Tab>
    silent! cunmap <S-Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <C-y>
    silent! cunmap <C-e>
  endfunction

  call ddc#enable()
'''

# ---- ddc ui ----
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = 'pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'
lua_add = '''
local res = {
   { key = '<C-n>', func = function() vim.fn['pum#map#insert_relative'](1, 'loop') end, desc = 'cursor down and loop items' },
   { key = '<C-p>', func = function() vim.fn['pum#map#insert_relative'](-1, 'loop') end, desc = '' },
   { key = '<C-y>', func = function() vim.fn['pum#map#confirm']() end, desc = '' },
   { key = '<C-e>', func = function() vim.fn['pum#map#cancel']() end, desc = '' },
   { key = '<C-u>', func = function() vim.fn['pum#map#insert_relative_page'](1, 'loop') end, desc = '' },
   { key = '<C-d>', func = function() vim.fn['pum#map#insert_relative_page'](-1, 'loop') end, desc = '' },
}

for _, v in ipairs(res) do
  vim.keymap.set('i', v.key, v.func, { silent = true, desc = v.desc })
end
'''
lua_source = '''
vim.fn['pum#set_option']({
    max_width = 100,
    border = 'single',
    })
'''


[[plugins]]
# to show lsp signature help
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
depends = ['denops.vim']
hook_source = '''
let g:signature_help_config = { 'contentsStyle': 'full', 'viewStyle': 'floating' }
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
depends = ['denops.vim']
hook_source = '''
call popup_preview#enable()
'''

#  ---- ddc source ----
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-zsh'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

# ---- ddc filter ----
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# --- SKK ---
[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
let s:skk_dir = expand('~/.config/skk')
let s:global_skk_jisyo = s:skk_dir . '/SKK-JISYO.L'
let s:user_skk_jisyo = s:skk_dir . '/user-dict'
let s:skk_dict_url = 'http://openlab.jp/skk/skk/dic/SKK-JISYO.L'

" download skk dictionary file
if !isdirectory(s:skk_dir)
    call mkdir(s:skk_dir)
    execute '!curl' s:skk_dict_url '-o' expand(s:global_skk_jisyo)
endif

function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'eggLikeNewline': v:true,
    \ 'keepState': v:false,
    \ 'globalJisyo': s:global_skk_jisyo,
    \ 'userJisyo': s:user_skk_jisyo,
    \ 'immediatelyJisyoRW': v:false,
    \ 'markerHenkan': '|',
    \ 'markerHenkanSelect': '?'
    \ })
  call skkeleton#register_kanatable('rom', {
    \ "z\<Space>": ["\u3000", ''],
    \ "z.": ["．", ''],
    \ "z,": ["，", '']
    \ })
endfunction
augroup skkeleton-initialize-pre
  autocmd!
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
'''

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
depends = ['skkeleton']
lua_source = '''
require('skkeleton_indicator').setup{}
'''

# --- Language Server Protocol ---
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason-lspconfig', 'neodev.nvim']
lua_source = '''
require('rc.nvim-lspconfig')
'''

[[plugins]]
repo = 'folke/neodev.nvim'
on_source = 'nvim-lspconfig'

# --- Snippets
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_filetypes = {}
'''

# snippets collections
[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
local mason = require('mason')
mason.setup({
  ui = { icons = { package_installed = "＊", package_pending = "∴", package_uninstalled = "×" } }
})
'''
[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
[[plugins]]
repo = "nvim-lua/plenary.nvim"

[[plugins]]
repo = 'tomato3713/ddu-source-joplin'
[[plugins]]
repo = 'tomato3713/ddu-kind-joplin'
