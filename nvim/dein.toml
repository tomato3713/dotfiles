[[plugins]]
repo = 'Shougo/dein.vim'

# --- Framework ---
[[plugins]]
repo = 'vim-denops/denops.vim'

# --- Colorscheme
[[plugins]]
repo = 'joshdick/onedark.vim'
# hook_add = '''
#  colorscheme onedark
# '''

[[plugins]]
repo = 'fenetikm/falcon'
hook_add = '''
colorscheme falcon
'''

[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_source = '''
vim.notify = require('notify').setup({
    background_colour = "#000000"
})
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'
lua_source = '''
require('dressing').setup()
'''

# --- Rich Help ---
[[plugins]]
repo = 'folke/which-key.nvim'
lua_source = '''
require('which-key').setup {}
'''

# --- Faster UI Controll ---
[[plugins]]
repo = 'simeji/winresizer'

# --- Rich Text Edit ---
[[plugins]]
repo = 'karb94/neoscroll.nvim'
lua_source = '''
require('neoscroll').setup()
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
lua_source = '''
require('treesitter-context').setup({ enable = false })
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'echasnovski/mini.nvim'
lua_source = '''
require('mini.comment').setup {
    options = {
        custom_commentstring = function()
            return require('ts_context_commentstring.internal').calculate_commentstring() or vim.bo.commentstring
        end,
    },
    mappings = {
        comment = 'gc', -- Toggle comment (like `gcip` comment inner paragraph)
        comment_line = 'gcc',
        textobject = 'gc',
    },
}
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
# use treesitter to autoclose and autorename html tag
repo = 'windwp/nvim-ts-autotag'
lua_source = '''
require('nvim-ts-autotag').setup()
'''

# --- Search ---
[[plugins]]
repo = 'lambdalisue/kensaku.vim'

[[plugins]]
repo = 'lambdalisue/kensaku-search.vim'
hook_add = '''
cnoremap <CR> <Plug>(kensaku-search-replace)<CR>
'''

# --- Script Quick Runner ---
[[plugins]]
repo = 'thinca/vim-quickrun'

# --- Git ---
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'rhysd/committia.vim'
hook_source = '''
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    endif

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

[[plugins]]
repo = 'ruifm/gitlinker.nvim'
depends = 'nvim-lua/plenary.nvim'
lua_source = '''
require"gitlinker".setup({
    mappings = nil,
})
-- yank the URL of the current or selected line.
vim.api.nvim_set_keymap('n', '<leader>gy', '<cmd>lua require"gitlinker".get_buf_range_url("n")<cr>', {silent = true})
vim.api.nvim_set_keymap('v', '<leader>gy', '<cmd>lua require"gitlinker".get_buf_range_url("v")<cr>', {silent = true})

-- repository home page url (copy and open browser).
vim.api.nvim_set_keymap('n', '<leader>gY', '<cmd>lua require"gitlinker".get_repo_url()<cr>', {silent = true})
vim.api.nvim_set_keymap('n', '<leader>gB', '<cmd>lua require"gitlinker".get_repo_url({action_callback = require"gitlinker.actions".open_in_browser})<cr>', {silent = true})

-- open browser in cursor line or selected lines.
vim.api.nvim_set_keymap('n', '<leader>gb', '<cmd>lua require"gitlinker".get_buf_range_url("n", {action_callback = require"gitlinker.actions".open_in_browser})<cr>', {silent = true})
vim.api.nvim_set_keymap('v', '<leader>gb', '<cmd>lua require"gitlinker".get_buf_range_url("v", {action_callback = require"gitlinker.actions".open_in_browser})<cr>', {silent = true})

-- yank  the URL of the current buffer file.
vim.api.nvim_set_keymap('n', '<leader>gf', '<cmd>lua require"gitlinker".get_buf_range_url({ add_current_line_on_normal_mode = false })<cr>', {silent = true})

local yank_markdown = function()
    local pos1 = vim.fn.getpos("v")[2]
    local pos2 = vim.fn.getcurpos()[2]

    local lstart = math.min(pos1, pos2)
    local lend = math.max(pos1, pos2)

    -- yank selected text
    local text = vim.api.nvim_buf_get_lines(0, tonumber(lstart)-1, tonumber(lend), false)

    local filename = vim.fn.expand('%:t')

    local yank_to_clipboard = function(text)
        return function(url)
            vim.fn.setreg('+', table.concat({url, '``` ' .. filename, text, '```'}, '\n'))
        end
    end

    require('gitlinker').get_buf_range_url("v", { action_callback =  yank_to_clipboard(table.concat(text, '\n')) })
end

local yank_scrapbox = function()
    local pos1 = vim.fn.getpos("v")[2]
    local pos2 = vim.fn.getcurpos()[2]

    local lstart = math.min(pos1, pos2)
    local lend = math.max(pos1, pos2)

    -- yank selected text
    local raw_text = vim.api.nvim_buf_get_lines(0, tonumber(lstart)-1, tonumber(lend), false)
    local text = {}
    for k, v in pairs (raw_text) do
        text[k] = '\t' .. v
    end

    local filename = vim.fn.expand('%:t')

    local yank_to_clipboard = function(text)
        return function(url)
            vim.fn.setreg('+', table.concat({url, 'code: ' .. filename, text}, '\n'))
        end
    end

    require('gitlinker').get_buf_range_url("v", { action_callback =  yank_to_clipboard(table.concat(text, '\n')) })
end
vim.keymap.set('v', '<leader>gs', yank_scrapbox, {silent = true, desc = 'yank links and selected text in Scrapbox format'})
vim.keymap.set('v', '<leader>gm', yank_markdown, {silent = true, desc = 'yank links and selected text in Markdown format'})
'''

# --- Docker ---
[[plugins]]
repo = 'skanehira/denops-docker.vim'

# --- Rich Syntax Highlight ---
# highlighting other uses of the word under the cursor
[[plugins]]
repo = 'RRethy/vim-illuminate'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
depends = ['nvim-ts-context-commentstring']
merged = 0
hook_post_update = 'TSUpdate'
lua_source = '''
require'nvim-treesitter.configs'.setup {
    ensure_installed = { "go", "c", "cpp", "markdown", "toml", "tsx", "json", "css", "lua", "yaml" },
    sync_install = false, -- install languages synchronously (only applied to `ensure_installed`)
    highlight = {
        enable = true,              -- false will disable the whole extension
        disable = { "vim" },  -- list of language that will be disabled
        additional_vim_regex_highlighting = false,
    },
    indent = {
        enable = true,
    },
    context_commentstring = {
        enable = true,
        enable_autocmd = false,
    },
}
'''

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'

# --- File Exploer
[[plugins]]
repo = 'tomato3713/hijack-open-directory.nvim'

[[plugins]]
repo = 'obaland/vfiler.vim'
depends = ['hijack-open-directory.nvim']
lua_add = '''
-- Disable embeded plugins.
vim.api.nvim_set_var('loaded_netrwPlugin', 1)

require('hijack_open_directory').setup({
     filer = function(path) require('vfiler').start(path, {noremap = true, silent = true }) end
})

local opts = { noremap=true, silent=true }
--- open filer in window
vim.keymap.set('n', '<Leader>E', '<Cmd>VFiler -layout=none<CR>', opts)
--- " open filer in side tab
vim.keymap.set('n', '<Leader>e', '<Cmd>VFiler -layout=left<CR>', opts)
'''
lua_source = '''
--- Support operation two buffers file explorer
local action = require('vfiler/action')
require('vfiler/config').setup {
    options = {
        auto_resize = true,
        keep = true,
        name = 'explorer',
        columns = 'indent,icon,name,git',
        iconstring = '-',
        git = { enabled = true, untracked = true, ignored = true },
        width = 34,
        listed = false,
    },
    mappings = {
        ['<C-l>'] = action.reload,
        ['<C-s>'] = action.toggle_sort,
        ['N'] = action.new_file,
        ['K'] = action.new_directory,
        ['s'] = action.open_by_split,
        ['v'] = action.open_by_vsplit,
    },
}
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
" Support LSP
nmap <space>v :Vista nvim_lsp<CR>
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_source = '''
call ddu#custom#patch_global(#{
    \    ui: 'ff',
    \    sources: [
    \        #{name: 'file_rec'},
    \        #{name: 'mr'},
    \        #{name: 'register'},
    \        #{name: 'buffer'},
    \    ],
    \    sourceParams: #{
    \        file_rec: #{ ignoredDirectories: ['.git', 'node_modules', 'vendor', '.next']  },
    \        joplin: #{
    \            token: $JOPLIN_TOKEN,
    \            fullPath: v:true,
    \        },
    \        joplin_tree: #{
    \            token: $JOPLIN_TOKEN,
    \        },
    \    },
    \    sourceOptions: {
    \      '_': #{
    \          matchers: ['matcher_kensaku'],
    \      },
    \      'joplin_tree': #{
    \          columns: ['filename'],
    \      },
    \    },
    \    filterParams: #{
    \        matcher_substring : #{ highhtMatched: 'Search' },
    \    },
    \    kindOptions: #{
    \        help: #{ defaultAction: 'open' },
    \        file: #{ defaultAction: 'open' },
    \        joplin: #{ defaultAction: 'open' },
    \        lsp: #{ defaultAction: 'open' },
    \        colorscheme: #{ defaultAction: 'set' },
    \    },
    \    uiParams: #{
    \        ff: #{ prompt: '>> ', startFilter: v:true, split: 'floating' },
    \        filer: #{ displayTree: v:true },
    \    },
    \ })

call ddu#custom#patch_local('grep', #{
    \   sourceParams: {
    \       'rg': { 'args': ['--column', '--no-heading', '--color', 'never'] },
    \   },
    \   uiParams: {
    \       'ff': #{ startFilter: v:true },
    \       'filer': #{
    \           sort: 'filename',
    \           displayTree: v:true,
    \       },
    \   }
    \ })

"show vim help
nnoremap <silent> ,h <Cmd>call ddu#start(#{ui: 'ff', name: 'help_tags', sources: [#{ name: 'help' }] })<CR>
"show history list
nnoremap <silent> ,m <Cmd>call ddu#start(#{ui: 'ff', name: 'mr', sources: [#{ name: 'mr' }] })<CR>
"show buffer list
nnoremap <silent> ,b <Cmd>call ddu#start(#{ui: 'ff', name: 'buffer', sources: [#{ name: 'buffer' }]})<CR>
"show file list in tree format
nnoremap <silent> ,c <Cmd>call ddu#start(#{ui: 'filer', name: 'file', sources: [#{ name: 'file' }]})<CR>
"show file list
nnoremap <silent> ,f <Cmd>call ddu#start(#{ui: 'ff', name: 'file_rec', sources: [#{ name: 'file_rec' }]})<CR>
nnoremap <silent> ,c <Cmd>call ddu#start(#{ui: 'ff', name: 'colorscheme', sources: [#{ name: 'colorscheme' }]})<CR>
" ファイル検索開始
" カーソル上のワードで grep
nmap <silent> ,g <Cmd>call ddu#start({
    \       'name': 'grep',
    \       'sources': [
    \           { 'name': 'rg', 'params': { 'input': expand('<cword>') } }
    \       ]
    \   }
    \   )<CR>
nmap <silent> ,k <Cmd>call ddu#start({
    \       'name': 'joplin',
    \       'sources': [
    \           { 'name': 'joplin', 'params': { 'input': expand('<cword>') } }
    \       ]
    \   }
    \   )<CR>
nmap <silent> ,j <Cmd>call ddu#start(#{
    \   ui: 'ff',
    \   name: 'joplin',
    \   sources: [
    \       #{ name: 'joplin' },
    \   ],
    \   sourceParams: #{
    \     joplin: #{
    \       fullPath: v:true
    \     },
    \   },
    \   })<CR>
nmap <silent> ,t <Cmd>call ddu#start(#{
    \   ui: 'filer',
    \   name: 'joplin',
    \   sources: [
    \       #{ name: 'joplin_tree' },
    \   ],
    \   sourceParams: #{
    \     joplin_tree: #{
    \       token: $JOPLIN_TOKEN,
    \     },
    \   },
    \   })<CR>
" sources from language server
nmap <silent> <space>h <Cmd>call ddu#start(#{
    \   ui: 'filer',
    \   name: 'lsp_callHierarchy',
    \   sources: [
    \       #{
    \           name: 'lsp_callHierarchy',
    \           params: #{ method: 'callHierarchy/outgoingCalls' },
    \       },
    \       #{
    \           name: 'lsp_callHierarchy',
    \           params: #{ method: 'callHierarchy/incommingCalls' },
    \       },
    \   ],
    \   })<CR>

nmap <silent> gr <Cmd>call ddu#start(#{
    \   ui: 'ff',
    \   name: 'lsp_references',
    \   sources: [
    \       #{
    \           name: 'lsp_references',
    \       },
    \   ],
    \   })<CR>
nmap <silent> gi <Cmd>call ddu#start(#{
    \   ui: 'ff',
    \   name: 'lsp',
    \   sources: [
    \       #{
    \           name: 'lsp_definition',
    \           method: 'textDocument/implementation',
    \       },
    \   ],
    \   })<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
hook_source = '''
autocmd FileType ddu-ff call s:ddu_ff_my_settings()
function! s:ddu_ff_my_settings() abort
  nnoremap <buffer><silent> q       <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer><silent> <CR>    <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space> <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> f       <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> p       <Cmd>call ddu#ui#ff#do_action('preview')<CR>
  nnoremap <buffer><silent> nn      <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'newNote' })<CR>
  nnoremap <buffer><silent> nt      <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'newTodo' })<CR>
  nnoremap <buffer><silent> r       <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name':  'rename' })<CR>
  nnoremap         <buffer> o       <Cmd>call ddu#ui#ff#do_action('expandItem', { 'mode':  'toggle' })<CR>
endfunction
autocmd FileType ddu-ff-filter call s:ddu_ff_filter_my_settings()
function! s:ddu_ff_filter_my_settings() abort
  inoremap <buffer><silent> <CR>  <Esc><Cmd>call ddu#ui#ff#do_action("itemAction")<CR>
  inoremap <buffer><silent> <Esc> <Esc><Cmd>call ddu#ui#ff#do_action("quit")<CR>
  inoremap <buffer><silent> <C-n> <C-o><Cmd>call ddu#ui#ff#execute("normal j")<CR>
  inoremap <buffer><silent> <C-p> <C-o><Cmd>call ddu#ui#ff#execute("normal k")<CR>
  inoremap <buffer><silent> <C-t>       <Cmd>call ddu#ui#ff#do_action('preview')<CR>
endfunction
'''
[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
hook_source = '''
autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
  nnoremap <buffer><silent> q       <Cmd>call ddu#ui#filer#do_action('quit')<CR>
  nnoremap <buffer><silent> <CR>    <Cmd>call ddu#ui#filer#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space> <Cmd>call ddu#ui#filer#do_action('toggleSelectItem')<CR>
  nnoremap         <buffer> o       <Cmd>call ddu#ui#filer#do_action('expandItem', { 'mode':    'toggle' })<CR>
  nnoremap         <buffer> nf      <Cmd>call ddu#ui#filer#do_action('itemAction', { 'name': 'newFolder' })<CR>
  nnoremap         <buffer> nn      <Cmd>call ddu#ui#filer#do_action('itemAction', { 'name':   'newNote' })<CR>
  nnoremap         <buffer> nt      <Cmd>call ddu#ui#filer#do_action('itemAction', { 'name':   'newTodo' })<CR>
  nnoremap         <buffer> dd      <Cmd>call ddu#ui#filer#do_action('itemAction', { 'name':    'delete' })<CR>
endfunction
'''
[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'
[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-rg'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'
[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'
[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'
[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'
[[plugins]]
repo = '4513ECHO/ddu-source-colorscheme'
on_source = 'ddu.vim'
[[plugins]]
repo = 'lambdalisue/mr.vim'
on_source = 'ddu.vim'
hook_source = '''
augroup GitCommit
    autocmd!
    autocmd FileType gitcommit setlocal spell
augroup END
'''
[[plugins]]
on_source = 'ddu.vim'
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
on_source = 'ddu.vim'
repo = 'Milly/ddu-filter-kensaku'
[[plugins]]
on_source = 'ddu.vim'
repo = 'Shougo/ddu-commands.vim'
hook_add = '''
'''
[[plugins]]
on_source = 'ddu.vim'
repo = 'Shougo/ddu-kind-file'

# --- Asynchronous Completion Framwwork ---
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
hook_source = '''
  call ddc#custom#patch_global(#{
    \   ui: 'pum',
    \   sources: ['skkeleton', 'vsnip', 'nvim-lsp', 'around', 'file'],
    \   autoCompleteEvents: ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged'],
    \   sourceOptions: #{
    \     _: #{
    \       ignoreCase: v:true,
    \       matchers: ['matcher_fuzzy'],
    \       sorters: ['sorter_fuzzy'],
    \       converters: ['converter_fuzzy'],
    \     },
    \     around: #{
    \       mark: 'around',
    \     },
    \     nvim-lsp: #{
    \       mark: 'lsp',
    \       forceCompletionPattern: '\.\w*|:\w*|->\w*',
    \     },
    \     vsnip: #{
    \         mark: 'snip',
    \     },
    \     skkeleton: #{
    \       mark: 'skk',
    \       matchers: ['skkeleton'],
    \       sorters: [],
    \       minAutoCompleteLength: 1,
    \       isVolatile: v:true,
    \     },
    \     file: #{
    \       mark: 'file',
    \       forceCompletionPattern: '\S/\S*',
    \       isVolatile: v:true,
    \     },
    \     cmdline: #{
    \       mark: 'cmd',
    \     },
    \     cmdline-history: #{
    \       mark: 'cmd hist',
    \     },
    \   },
    \   sourceParams: #{
    \     nvim-lsp: #{
    \       snippetEngine: denops#callback#register({
    \         body -> vsnip#anonymous(body)
    \       }),
    \       enableResolveItem: v:true,
    \       enableAdditionalTextEdit: v:true,
    \     },
    \   },
    \   cmdlineSources: {
    \     ':': ['cmdline', 'skkeleton', 'file'],
    \   },
    \ })

  inoremap <expr> <C-l> ddc#map#manual_complete()

  nnoremap :       <Cmd>call CommandlinePre()<CR>:

  function! CommandlinePre() abort
    cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

    autocmd User DDCCmdlineLeave ++once call CommandlinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
  endfunction

  function! CommandlinePost() abort
    silent! cunmap <Tab>
    silent! cunmap <S-Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <C-y>
    silent! cunmap <C-e>
  endfunction

  call ddc#enable()
'''

# ---- ddc ui ----
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = 'pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'
hook_add = '''
inoremap <C-n> <Cmd>call pum#map#insert_relative(+1, 'loop')<CR>
inoremap <C-p> <Cmd>call pum#map#insert_relative(-1, 'loop')<CR>
inoremap <C-y> <Cmd>call pum#map#confirm()<CR>
inoremap <C-e> <Cmd>call pum#map#cancel()<CR>
inoremap <C-u> <Cmd>call pum#map#insert_relative_page(+1, 'loop')<CR>
inoremap <C-d> <Cmd>call pum#map#insert_relative_page(-1, 'loop')<CR>
'''
hook_source = '''
  call pum#set_option(#{
    \ max_width: 100,
    \ border: 'single',
    \ })
'''


[[plugins]]
# to show lsp signature help
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
depends = ['denops.vim']
hook_source = '''
let g:signature_help_config = { 'contentsStyle': 'full', 'viewStyle': 'floating' }
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
depends = ['denops.vim']
hook_source = '''
call popup_preview#enable()
'''

#  ---- ddc source ----
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

# ---- ddc filter ----
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# --- SKK ---
[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
let s:skk_dir = expand('~/.config/skk')
let s:global_skk_jisyo = s:skk_dir . '/SKK-JISYO.L'
let s:user_skk_jisyo = s:skk_dir . '/user-dict'
let s:skk_dict_url = 'http://openlab.jp/skk/skk/dic/SKK-JISYO.L'

" download skk dictionary file
if !isdirectory(s:skk_dir)
    call mkdir(s:skk_dir)
    execute '!curl' s:skk_dict_url '-o' expand(s:global_skk_jisyo)
endif

function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'eggLikeNewline': v:true,
    \ 'keepState': v:false,
    \ 'globalJisyo': s:global_skk_jisyo,
    \ 'userJisyo': s:user_skk_jisyo,
    \ 'immediatelyJisyoRW': v:false,
    \ 'markerHenkan': '|',
    \ 'markerHenkanSelect': '?'
    \ })
  call skkeleton#register_kanatable('rom', {
    \ "z\<Space>": ["\u3000", ''],
    \ "z.": ["．", ''],
    \ "z,": ["，", '']
    \ })
endfunction
augroup skkeleton-initialize-pre
  autocmd!
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
'''

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
depends = ['skkeleton']
lua_source = '''
require('skkeleton_indicator').setup{}
'''

# --- Language Server Protocol ---
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason-lspconfig', 'neodev.nvim']
lua_source = '''
local nvim_lsp = require('lspconfig')
local mason_lspconfig = require('mason-lspconfig')
require('neodev').setup()

-- LSPの警告フォーマット
-- ref: https://dev.classmethod.jp/articles/eetann-change-neovim-lsp-diagnostics-format/
vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
  virtual_text = {
    format = function(diagnostic)
      return string.format('%s (%s: %s)', diagnostic.message, diagnostic.source, diagnostic.code)
    end,
  },
})
vim.lsp.handlers['textDocument/hover'] = vim.lsp.with(vim.lsp.handlers.hover, {
    silent = true,
    border = "single",
})
vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(
  vim.lsp.handlers.signature_help, {
    silent = true,
    border = "single"
  }
)
vim.diagnostic.config {
  float = { border = "single" },
}

-- Global mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local bufopts = { noremap=true, silent=true }
vim.keymap.set('n', '<Space>df', '<cmd>lua vim.diagnostic.open_float()<CR>', bufopts)
vim.keymap.set('n',        '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>',  bufopts)
vim.keymap.set('n',        ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>',  bufopts)
vim.keymap.set('n',  '<Space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', bufopts)

local on_attach = function(client, bufnr)
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  -- code reading
  -- show information at cursor
  --- 定義情報などを表示する
  vim.keymap.set('n',        'K', vim.lsp.buf.hover,                                 bufopts)
  --- 関数の引数の内容とかを表示する
  vim.keymap.set('n',    '<c-k>', vim.lsp.buf.signature_help,                        bufopts)
  --- カーソル行のエラーを表示
  vim.keymap.set('n',       'gs', vim.diagnostic.open_float, bufopts)

  -- code walking
  --- 定義に移動
  vim.keymap.set('n',       'gd', '<cmd>lua vim.lsp.buf.definition()<CR>',           bufopts)
  --- 型定義に移動
  vim.keymap.set('n',      'gtd', '<cmd>lua vim.lsp.buf.type_definition()<CR>',      bufopts)
  --- 宣言に移動
  vim.keymap.set('n',       'gD', '<cmd>lua vim.lsp.buf.declaratioin()<CR>',         bufopts)
  --- 実装へ移動
  -- vim.keymap.set('n',       'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>',       bufopts)
  --- 参照一覧をQFに表示して、選択した場所に移動する
  -- vim.keymap.set('n',       'gr', '<cmd>lua vim.lsp.buf.references()<CR>',           bufopts)
  --- 前のエラーに移動
  vim.keymap.set('n',       'g[', '<cmd>lua vim.lsp.buf.diagnostic.show_prev()<CR>', bufopts)
  --- 次のエラーに移動
  vim.keymap.set('n',       'g]', '<cmd>lua vim.lsp.buf.diagnostic.show_next()<CR>', bufopts)

  -- code edit
  --- 関数名や変数名をリネーム
  vim.keymap.set('n', '<Space>r', '<cmd>lua vim.lsp.buf.rename()<CR>',               bufopts)
  --- フォーマット実行
  vim.keymap.set('n', '<Space>f', '<cmd>lua vim.lsp.buf.format( { async = true } )<CR>',           bufopts)
  --- コードアクションを実行する．構造体を埋めたり，
  vim.keymap.set('n', '<Space>a', '<cmd>lua vim.lsp.buf.code_action()<CR>', bufopts)

  -- workspace
  --- ワークスペース一覧を表示
  vim.keymap.set("n", "<space>wl", '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>')
  --- ワークスペースにフォルダを追加する
  vim.keymap.set("n", "<space>wa", '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>')
  vim.keymap.set("n", "<space>wr", '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>')

  -- if client.server_capabilities.documentFormattingProvider then
  --   vim.api.nvim_create_autocmd("BufWritePre", {
  --       buffer = buffer,
  --       callback = function()
  --           vim.lsp.buf.format { async = true }
  --       end
  --   })
  -- end
end

mason_lspconfig.setup_handlers({
    function(server_name)
        -- tsserverとdenolsを出し分ける
        local node_root_dir = nvim_lsp.util.root_pattern("package.json")
        local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

        local opts = {}
        if server_name == "tsserver" then
            if not is_node_repo then return end
            opts.root_dir = node_root_dir
        elseif server_name == "eslint" then
            if not is_node_repo then return end
            opts.root_dir = node_root_dir
        elseif server_name == "denols" then
            if is_node_repo then return end
            opts.root_dir = nvim_lsp.util.root_pattern("deno.json", "deno.jsonc", "deps.ts", "import_map.json", "denops")
            opts.init_options = {
               lint = true,
               unstable = true,
               suggest = {
                 imports = {
                   hosts = { ["https://deno.land"] = true, ["https://cdn.nest.land"] = true, ["https://crux.land"] = true }
                 }
               }
            }
        end

        opts.on_attach = on_attach

        local capabilities = vim.lsp.protocol.make_client_capabilities()
        capabilities.textDocument.completion.completionItem.snippetSupport = true
        opts.capabilities = capabilities

        nvim_lsp[server_name].setup(opts)
    end
})
'''

[[plugins]]
repo = 'folke/neodev.nvim'
on_source = 'nvim-lspconfig'

# --- Snippets
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_filetypes = {}
'''

# [[plugins]]
# repo = 'hrsh7th/vim-vsnip-integ'
# hook_source = '''
# autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
# '''

# snippets collections
[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
local mason = require('mason')
mason.setup({
  ui = { icons = { package_installed = "＊", package_pending = "∴", package_uninstalled = "×" } }
})
'''
[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
[[plugins]]
repo = "jose-elias-alvarez/null-ls.nvim"
depends = ['plenary.nvim']
lua_source = '''
local status, null_ls = pcall(require, "null-ls")
if (not status) then return end

null_ls.setup({
    -- Linter/Formatter
    sources = {
        -- ローカル/グローバルのESLintのコード診断機能をnull-lsで利用する
        null_ls.builtins.diagnostics.eslint.with({ prefier_local = "node_modules/.bin" }), -- プロジェクトローカルがある場合は、それを利用する
        null_ls.builtins.formatting.prettier,
        null_ls.builtins.formatting.markdownlint,
    },
    debug = false,
})
'''
[[plugins]]
repo = "nvim-lua/plenary.nvim"

[[plugins]]
repo = 'tomato3713/ddu-source-joplin'
[[plugins]]
repo = 'tomato3713/ddu-kind-joplin'

# [[plugins]]
# repo = '~/repos/dps-joplin'
# hook_add = '''
# let g:joplin_token = $JOPLIN_TOKEN
# let g:joplin_debug = v:true
# '''
