# --- Framework ---
[[plugins]]
repo = 'vim-denops/denops.vim'

# --- Colorscheme
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
colorscheme onedark
'''

# --- Rich Help ---
[[plugins]]
repo = 'folke/which-key.nvim'
lua_source = '''
require('which-key').setup {}
'''

# --- Faster UI Controll ---
[[plugins]]
repo = 'simeji/winresizer'

# --- Rich Text Edit ---
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <plug>(caw:zeropos:toggle)
vmap <Leader>c <plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
lua_source = '''
require('nvim-ts-autotag').setup()
'''

# --- Script Quick Runner
[[plugins]]
repo = 'thinca/vim-quickrun'

# --- Git ---
[[plugins]]
repo = 'airblade/vim-gitgutter'

# --- Docker ---
[[plugins]]
repo = 'skanehira/denops-docker.vim'

# --- Rich Syntax Highlight ---
# highlighting other uses of the word under the cursor 
[[plugins]]
repo = 'RRethy/vim-illuminate'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_post_update = 'TSUpdate'
lua_source = '''
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "go", "c", "cpp", "markdown", "toml", "tsx", "json", "css", "lua", "yaml" },
  sync_install = false, -- install languages synchronously (only applied to `ensure_installed`)
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "vim" },  -- list of language that will be disabled
    additional_vim_regex_highlighting = false,
  },
  indent = {
      enable = true,
  }
}
'''

# --- File Exploer
[[plugins]]
repo = 'obaland/vfiler.vim'
lua_add = '''
local opts = { noremap=true, silent=true }
--- open filer in window
vim.keymap.set('n', '<Leader>E', '<Cmd>VFiler -layout=none<CR>', opts)
--- " open filer in side tab
vim.keymap.set('n', '<Leader>e', '<Cmd>VFiler -layout=left<CR>', opts)
'''
lua_source = '''
--- Support operation two buffers file explorer
local action = require('vfiler/action')
require('vfiler/config').setup {
    options = {
        auto_resize = true,
        keep = true,
        name = 'explorer',
        columns = 'indent,icon,name,git',
        iconstring = '-',
        git = { enabled = true, untracked = true, ignored = true },
        width = 34,
    },
    mappings = {
        ['<C-l>'] = action.reload,
        ['<C-s>'] = action.toggle_sort,
        ['N'] = action.new_file,
        ['K'] = action.new_directory,
        ['s'] = action.open_by_split,
        ['v'] = action.open_by_vsplit,
    },
}
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
" Support LSP
nmap <space>v :Vista nvim_lsp<CR>
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_source = '''
call ddu#custom#patch_global(#{
    \   ui: 'ff',
    \   sources: [
    \       #{name: 'file_rec'},
    \       #{name: 'mr'},
    \       #{name: 'register'},
    \       #{name: 'buffer'},
    \       #{name: 'joplin'},
    \   ],
    \   sourceParams: #{
    \     file_rec: #{ ignoredDirectories: ['.git', 'node_modules', 'vendor', '.next']  },
    \     joplin: #{
    \       token: $JOPLIN_TOKEN,
    \       fullPath: v:true
    \     },
    \     joplin_tree: #{
    \       token: $JOPLIN_TOKEN,
    \     },
    \   },
    \   sourceOptions: {
    \     '_': #{
    \       matchers: ['matcher_substring'],
    \     },
    \     'joplin_tree': #{
    \       columns: ['filename'],
    \     },
    \   },
    \   filterParams: #{
    \       matcher_substring : #{ highhtMatched: 'Search' } 
    \   },
    \   kindOptions: #{
    \     file: #{
    \       defaultAction: 'open',
    \     },
    \     joplin: #{
    \       defaultAction: 'open',
    \     },
    \     lsp: #{
    \       defaultAction: 'open',
    \     },
    \   },
    \   uiParams: #{
    \       ff: #{ prompt: '>> ', startFilter: v:true },
    \       filer: #{ displayTree: v:true },
    \   },
    \ })

call ddu#custom#patch_local('grep', #{
    \   sourceParams: {
    \       'rg': { 'args': ['--column', '--no-heading', '--color', 'never'] },
    \   },
    \   uiParams: {
    \       'ff': #{ startFilter: v:false },
    \       'filer': #{ 
    \           sort: 'filename',
    \           displayTree: v:true,
    \       },
    \   }
    \ })

"show history list
nnoremap <silent> ,m <Cmd>call ddu#start(#{ui: 'ff', name: 'mr', sources: [#{ name: 'mr' }] })<CR>
"show buffer list
nnoremap <silent> ,b <Cmd>call ddu#start(#{ui: 'ff', name: 'buffer', sources: [#{ name: 'buffer' }]})<CR>
"show file list in tree format
nnoremap <silent> ,c <Cmd>call ddu#start(#{ui: 'filer', name: 'file', sources: [#{ name: 'file' }]})<CR>
"show file list
nnoremap <silent> ,f <Cmd>call ddu#start(#{ui: 'ff', name: 'file_rec', sources: [#{ name: 'file_rec' }]})<CR>
" ファイル検索開始
" カーソル上のワードで grep
nmap <silent> ,g <Cmd>call ddu#start({
    \       'name': 'grep',
    \       'sources': [ 
    \           { 'name': 'rg', 'params': { 'input': expand('<cword>') } }
    \       ]
    \   }
    \   )<CR>
nmap <silent> ,k <Cmd>call ddu#start({
    \       'name': 'joplin',
    \       'sources': [
    \           { 'name': 'joplin', 'params': { 'input': expand('<cword>') } }
    \       ]
    \   }
    \   )<CR>
nmap <silent> ,j <Cmd>call ddu#start(#{
    \   ui: 'ff',
    \   name: 'joplin',
    \   sources: [
    \       #{ name: 'joplin' },
    \   ],
    \   sourceParams: #{
    \     joplin: #{
    \       fullPath: v:true
    \     },
    \   },
    \   })<CR>
nmap <silent> ,t <Cmd>call ddu#start(#{
    \   ui: 'filer',
    \   name: 'joplin',
    \   sources: [
    \       #{ name: 'joplin_tree' },
    \   ],
    \   sourceParams: #{
    \     joplin_tree: #{
    \       token: $JOPLIN_TOKEN,
    \     },
    \   },
    \   })<CR>
nmap <silent> ,h <Cmd>call ddu#start(#{
    \   ui: 'filer',
    \   sync: v:true,
    \   name: 'lsp_callHierarchy',
    \   sources: [
    \       #{
    \           name: 'lsp_callHierarchy',
    \           params: #{ method: 'callHierarchy/outgoingCalls' },
    \       },
    \   ],
    \   })<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
hook_source = '''
autocmd FileType ddu-ff call s:ddu_ff_my_settings()
function! s:ddu_ff_my_settings() abort
  nnoremap <buffer><silent> q       <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer><silent> <CR>    <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space> <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> f       <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> p       <Cmd>call ddu#ui#ff#do_action('preview')<CR>
  nnoremap <buffer><silent> nn    <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'newNote' })<CR>
  nnoremap <buffer><silent> nt    <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'newTodo' })<CR>
  nnoremap <buffer><silent> r    <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'rename' })<CR>
  nnoremap <buffer>         o       <Cmd>call ddu#ui#filer#do_action('expandItem', { 'mode': 'toggle' })<CR>
endfunction
autocmd FileType ddu-ff-filter call s:ddu_ff_filter_my_settings()
function! s:ddu_ff_filter_my_settings() abort
  inoremap <buffer><silent> <CR>  <Esc><Cmd>close<CR>
  inoremap <buffer><silent> <Esc> <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR>  <Cmd>close<CR>
  nnoremap <buffer><silent> <Esc> <Cmd>close<CR>
endfunction
'''
[[plugins]]
repo = 'Shougo/ddu-ui-filer'
hook_source = '''
autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
  nnoremap <buffer><silent> q       <Cmd>call ddu#ui#filer#do_action('quit')<CR>
  nnoremap <buffer><silent> <CR>    <Cmd>call ddu#ui#filer#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space> <Cmd>call ddu#ui#filer#do_action('toggleSelectItem')<CR>
  nnoremap <buffer>         o       <Cmd>call ddu#ui#filer#do_action('expandItem', { 'mode': 'toggle' })<CR>
endfunction
'''
[[plugins]]
repo = 'Shougo/ddu-column-filename'
[[plugins]]
repo = 'Shougo/ddu-source-file'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
[[plugins]]
repo = 'Shougo/ddu-source-rg'
[[plugins]]
repo = 'Shougo/ddu-source-register'
[[plugins]]
repo = 'kuuote/ddu-source-mr'
[[plugins]]
repo = 'shun/ddu-source-buffer'
[[plugins]]
repo = 'lambdalisue/mr.vim'
hook_source = '''
augroup GitCommit
    autocmd!
    autocmd FileType gitcommit setlocal spell
augroup END
'''
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo = 'Shougo/ddu-commands.vim'
hook_add = '''
'''
[[plugins]]
repo = 'Shougo/ddu-kind-file'

# --- Asynchronous Completion Framwwork ---
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
hook_source = '''
  call pum#set_option({
    \ 'max_width': 100,
    \ 'padding': v:true,
    \ })

  call ddc#custom#patch_global('ui', 'pum')
  call ddc#custom#patch_global('sources', ['skkeleton', 'vsnip', 'nvim-lsp', 'around', 'file'])
  call ddc#custom#patch_global('sourceOptions',
    \ {
    \   '_': {
    \     'ignoreCase': v:true,
    \     'matchers': ['matcher_fuzzy'],
    \     'sorters': ['sorter_fuzzy'],
    \     'converters': ['converter_fuzzy']
    \   },
    \   'around': {
    \     'mark': 'around',
    \   },
    \   'nvim-lsp': {
    \     'mark': 'lsp',
    \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \   },
    \   'vsnip': {
    \       'mark': 'snip',
    \   },
    \   'skkeleton': {
    \     'mark': 'skk',
    \     'matchers': ['skkeleton'],
    \     'sorters': [],
    \     'minAutoCompleteLength': 1,
    \     'isVolatile': v:true,
    \   },
    \   'file': {
    \     'mark': 'file',
    \     'forceCompletionPattern': '\S/\S*',
    \     'isVolatile': v:true,
    \   },
    \ })

  call ddc#custom#patch_global('autoCompleteEvents',
      \ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged'])
  nnoremap :       <Cmd>call CommandlinePre()<CR>:

  function! CommandlinePre() abort
    cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    call ddc#custom#patch_buffer('cmdlineSources', ['cmdline', 'cmdline-history', 'skkeleton', 'around', 'file'])
    call ddc#custom#patch_buffer('sourceOptions',
      \ {
      \   '_': {
      \     'matchers': ['matcher_fuzzy'],
      \     'sorters': ['sorter_fuzzy'],
      \     'converters': ['converter_fuzzy']
      \   },
      \   'cmdline': {
      \     'mark': 'cmd',
      \   },
      \   'cmdline-history': {
      \     'mark': 'cmd hist',
      \   },
      \ })

    autocmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd InsertEnter <buffer> ++once call CommandlinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
  endfunction
  function! CommandlinePost() abort
    silent! cunmap <Tab>
    silent! cunmap <S-Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <C-y>
    silent! cunmap <C-e>

    " Restore sources
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif
  endfunction

  call ddc#enable()
'''

# ---- ddc ui ----
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
inoremap <C-n> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y> <Cmd>call pum#map#confirm()<CR>
inoremap <C-e> <Cmd>call pum#map#cancel()<CR>
inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>
'''

[[plugins]]
# to show lsp signature help
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
let g:signature_help_config = { 'contentsStyle': 'full', 'viewStyle': 'floating' }
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_source = '''
call popup_preview#enable()
'''

#  ---- ddc source ----
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

# ---- ddc filter ----
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# --- SKK ---
[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
let s:skk_dir = expand('~/.config/skk')
let s:global_skk_jisyo = s:skk_dir . '/SKK-JISYO.L'
let s:user_skk_jisyo = s:skk_dir . '/user-dict'
let s:skk_dict_url = 'http://openlab.jp/skk/skk/dic/SKK-JISYO.L'

" download skk dictionary file
if !isdirectory(s:skk_dir)
    call mkdir(s:skk_dir)
    execute '!curl' s:skk_dict_url '-o' expand(s:global_skk_jisyo)
endif

function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'eggLikeNewline': v:true,
    \ 'keepState': v:false,
    \ 'globalJisyo': s:global_skk_jisyo,
    \ 'userJisyo': s:user_skk_jisyo,
    \ 'immediatelyJisyoRW': v:false,
    \ 'markerHenkan': '|',
    \ 'markerHenkanSelect': '?'
    \ })
  call skkeleton#register_kanatable('rom', {
    \ "z\<Space>": ["\u3000", ''],
    \ "z.": ["．", ''],
    \ "z,": ["，", '']
    \ })
endfunction
augroup skkeleton-initialize-pre
  autocmd!
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
'''

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
depends = ['skkeleton']
lua_source = '''
require('skkeleton_indicator').setup{}
'''

# --- Language Server Protocol ---
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason-lspconfig']
lua_source = '''
local nvim_lsp = require('lspconfig')
local mason_lspconfig = require('mason-lspconfig')

-- LSPの警告フォーマット
-- ref: https://dev.classmethod.jp/articles/eetann-change-neovim-lsp-diagnostics-format/
vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
  virtual_text = {
    format = function(diagnostic)
      return string.format('%s (%s: %s)', diagnostic.message, diagnostic.source, diagnostic.code)
    end,
  },
})

-- Global mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local bufopts = { noremap=true, silent=true }
vim.keymap.set('n', '<Space>df', '<cmd>lua vim.diagnostic.open_float()<CR>', bufopts)
vim.keymap.set('n',        '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>',  bufopts)
vim.keymap.set('n',        ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>',  bufopts)
vim.keymap.set('n',  '<Space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', bufopts)

local on_attach = function(client, bufnr)
  local bufopts = { noremap=true, silent=true }
  -- code reading
  -- show information at cursor
  --- 定義情報などを表示する
  vim.keymap.set('n',        'K', vim.lsp.buf.hover,                                 bufopts)
  --- 関数の引数の内容とかを表示する
  vim.keymap.set('n',    '<c-k>', vim.lsp.buf.signature_help,                        bufopts)
  --- カーソル行のエラーを表示
  vim.keymap.set('n',       'gs', '<cmd>lua vim.lsp.buf.diagnostic.show_next()<CR>', bufopts)

  -- code walking
  --- 定義に移動
  vim.keymap.set('n',       'gd', '<cmd>lua vim.lsp.buf.definition()<CR>',           bufopts)
  --- 型定義に移動
  vim.keymap.set('n',      'gtd', '<cmd>lua vim.lsp.buf.type_definition()<CR>',      bufopts)
  --- 宣言に移動
  vim.keymap.set('n',       'gD', '<cmd>lua vim.lsp.buf.declaratioin()<CR>',         bufopts)
  --- 実装へ移動
  vim.keymap.set('n',       'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>',       bufopts)
  --- 参照一覧をQFに表示して、選択した場所に移動する
  vim.keymap.set('n',       'gr', '<cmd>lua vim.lsp.buf.references()<CR>',           bufopts)
  --- 前のエラーに移動
  vim.keymap.set('n',       'g[', '<cmd>lua vim.lsp.buf.diagnostic.show_prev()<CR>', bufopts)
  --- 次のエラーに移動
  vim.keymap.set('n',       'g]', '<cmd>lua vim.lsp.buf.diagnostic.show_next()<CR>', bufopts)

  -- code edit
  --- 関数名や変数名をリネーム
  vim.keymap.set('n', '<Space>r', '<cmd>lua vim.lsp.buf.rename()<CR>',               bufopts)
  --- フォーマット実行
  vim.keymap.set('n', '<Space>f', '<cmd>lua vim.lsp.buf.format( { async = true } )<CR>',           bufopts)
  --- コードアクションを実行する．構造体を埋めたり，
  vim.keymap.set('n', '<Space>a', '<cmd>lua vim.lsp.buf.code_action()<CR>', bufopts)

  -- workspace
  --- ワークスペース一覧を表示
  vim.keymap.set("n", "<space>wl", '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>')
  --- ワークスペースにフォルダを追加する
  vim.keymap.set("n", "<space>wa", '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>')
  vim.keymap.set("n", "<space>wr", '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>')
end

mason_lspconfig.setup_handlers({ 
    function(server_name)
        -- tsserverとdenolsを出し分ける
        local node_root_dir = nvim_lsp.util.root_pattern("package.json")
        local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

        local opts = {}
        if server_name == "tsserver" then 
            if not is_node_repo then return end
            opts.root_dir = node_root_dir
        elseif server_name == "eslint" then
            if not is_node_repo then return end
            opts.root_dir = node_root_dir
        elseif server_name == "denols" then
            if is_node_repo then return end
            opts.root_dir = nvim_lsp.util.root_pattern("deno.json", "deno.jsonc", "deps.ts", "import_map.json", "denops")
            opts.init_options = {
               lint = true,
               unstable = true,
               suggest = {
                 imports = {
                   hosts = { ["https://deno.land"] = true, ["https://cdn.nest.land"] = true, ["https://crux.land"] = true }
                 }
               }
            }
        end

        opts.on_attach = on_attach

        local capabilities = vim.lsp.protocol.make_client_capabilities()
        capabilities.textDocument.completion.completionItem.snippetSupport = true
        opts.capabilities = capabilities

        nvim_lsp[server_name].setup(opts)
    end
})
'''

# --- Snippets
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-k> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-k>'
smap <expr> <C-k> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-k>'
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
hook_source = '''
autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''

# snippets collections
[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
local mason = require('mason')
mason.setup({
  ui = { icons = { package_installed = "＊", package_pending = "∴", package_uninstalled = "×" } } 
})
'''
[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
[[plugins]]
repo = "jose-elias-alvarez/null-ls.nvim"
depends = ['plenary.nvim']
lua_source = '''
local status, null_ls = pcall(require, "null-ls")
if (not status) then return end

null_ls.setup({
    -- Linter/Formatter
    sources = {
        -- ローカル/グローバルのESLintのコード診断機能をnull-lsで利用する
        null_ls.builtins.diagnostics.eslint.with({ prefier_local = "node_modules/.bin" }), -- プロジェクトローカルがある場合は、それを利用する
        null_ls.builtins.formatting.prettier,
        null_ls.builtins.formatting.markdownlint,
    },
    debug = false,
})
'''
[[plugins]]
repo = "nvim-lua/plenary.nvim"

[[plugins]]
repo = '~/repos/github.com/tomato3713/ddu-source-joplin'
[[plugins]]
repo = '~/repos/github.com/tomato3713/ddu-kind-joplin'

# [[plugins]]
# repo = '~/repos/dps-joplin'
# hook_add = '''
# let g:joplin_token = $JOPLIN_TOKEN
# let g:joplin_debug = v:true
# '''
