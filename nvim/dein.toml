[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = ['Dein']

# --- Framework ---
[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]]
repo = 'vim-denops/denops-shared-server.vim'
depends = ['denops.vim']
hook_add = '''
function! s:dss(action) abort
  call denops_shared_server#{a:action}()
endfunction
function! s:dss_complete(...) abort
  return ['install', 'uninstall', 'restart']->join("\n")
endfunction
command! -nargs=1 -complete=custom,s:dss_complete -bar DenopsSharedServer call s:dss(<f-args>)
'''

# --- Colorscheme
[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'vigoux/oak'

[[plugins]]
repo = 'tanvirtin/monokai.nvim'
lua_source = '''
vim.cmd('colorscheme monokai')
'''

[[plugins]]
repo = 'folke/tokyonight.nvim'
lua_source = '''
require('tokyonight').setup {
  style = 'night',
  transparent = false,
  terminal_colors = true,
}
'''

[[plugins]]
repo = 'fenetikm/falcon'

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = ['notify']
lua_source = '''
require('notify').setup({
  background_colour = "#000000"
})
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'
lua_source = '''
require('dressing').setup()
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_source = '''
" Should set g:deol#prompt_pattern.
let g:deol#prompt_pattern = has('win32') ? '\f\+>' : '\w*% \?'
if !has('win32')
	let g:deol#external_history_path = '~/.zsh_history'
endif

nnoremap <expr> <Space>s '<Cmd>Deol -edit<CR>'
'''

# --- Rich Help ---
[[plugins]]
repo = 'folke/which-key.nvim'
lua_source = '''
require('which-key').setup {}
'''

# --- Faster UI Controll ---
[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
lua_source = '''
require('nvim-web-devicons').setup()
'''

# --- Rich Text Edit ---
[[plugins]]
repo = 'karb94/neoscroll.nvim'
lua_source = '''
require('neoscroll').setup()
'''

[[plugins]]
repo = 'https://github.com/ggandor/leap.nvim'
lua_source = '''
require('leap').add_default_mappings()
'''

[[plugins]]
repo = 'romgrk/barbar.nvim'
lua_source = '''
local opts = { noremap = true, silent = true }
vim.api.nvim_set_keymap('n', '<C-n>', '<Cmd>BufferPrevious<CR>', opts)
vim.api.nvim_set_keymap('n', '<C-p>', '<Cmd>BufferPrevious<CR>', opts)
vim.api.nvim_set_keymap('n', '<C-h>', '<Cmd>BufferClose<CR>', opts)
'''

[[plugins]]
repo = 'rgroli/other.nvim'
lua_source = '''
require('rc.other-nvim')
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
depends = ['nvim-treesitter']
lua_source = '''
require('treesitter-context').setup({ enable = false })
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'echasnovski/mini.nvim'
lua_source = '''
require('rc.mini')
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'mhartington/formatter.nvim'
hook_add = '''
augroup FormatAutogroup
  autocmd!
  autocmd BufWritePost * FormatWrite
augroup END
'''
lua_source = '''
require('rc.formatter')
'''

[[plugins]]
# use treesitter to autoclose and autorename html tag
repo = 'windwp/nvim-ts-autotag'
depends = ['nvim-treesitter']
lua_source = '''
require('nvim-ts-autotag').setup()
'''

# --- Search ---
[[plugins]]
repo = 'lambdalisue/kensaku.vim'
depends = ['denops.vim']

[[plugins]]
repo = 'lambdalisue/kensaku-search.vim'
lua_add = '''
vim.keymap.set('c', '<CR>', function()
	return vim.fn.getcmdtype() == '/' and '<Plug>(kensaku-search-replace)<CR>' or '<CR>'
end, {expr = true})
'''

# --- Script Quick Runner ---
[[plugins]]
repo = 'thinca/vim-quickrun'

# --- Git ---
[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
lua_source = '''
require('rc.gitsigns')
'''

[[plugins]]
repo = 'lambdalisue/gin.vim'
depends = ['denops.vim']

[[plugins]]
repo = 'rhysd/committia.vim'
hook_source = '''
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        " startinsert
    endif

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

[[plugins]]
repo = 'ruifm/gitlinker.nvim'
depends = ['plenary.nvim']
lua_source = '''
require('rc.gitlinker')
'''

# --- Docker ---
[[plugins]]
repo = 'skanehira/denops-docker.vim'

# --- Rich Syntax Highlight ---
# highlighting other uses of the word under the cursor
[[plugins]]
repo = 'RRethy/vim-illuminate'

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
lua_source = '''
require('colorizer').setup()
'''

[[plugins]]
repo = 'folke/todo-comments.nvim'
depends = ['plenary.nvim']
lua_source = '''
require("todo-comments").setup({
	keywords = {
		FIX = {
			icon = "F", -- icon used for the sign, and in search results
			color = "error", -- can be a hex color, or a named color (see below)
			alt = { "FIXME", "BUG", "FIXIT", "ISSUE" }, -- a set of other keywords that all map to this FIX keywords
		},
		TODO = { icon = "T", color = "info" },
		HACK = { icon = "H", color = "warning" },
		WARN = { icon = "W", color = "warning", alt = { "WARNING", "XXX" } },
		PERF = { icon = "P", alt = { "OPTIM", "PERFORMANCE", "OPTIMIZE" } },
		NOTE = { icon = "N", color = "hint", alt = { "INFO" } },
	},
})
'''

[[plugins]]
repo = 'danymat/neogen'
depends = ['nvim-treesitter']
lua_add = '''
local opts = { noremap = true, silent = true }
vim.api.nvim_set_keymap("n", "<Leader>nf", ":lua require('neogen').generate()<CR>", opts)
'''
lua_source = '''
require('neogen').setup()
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'CursorHold']
merged = 0
hook_post_update = 'TSUpdate'
lua_source = '''
require('rc.treesitter')
'''

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
lua_source = '''
vim.g.skip_ts_context_commentstring_module = true
require('ts_context_commentstring').setup {
	enable_autocmd = false,
}
'''

# --- File Exploer
[[plugins]]
repo = 'tomato3713/hijack-open-directory.nvim'

[[plugins]]
repo = 'obaland/vfiler.vim'
depends = ['hijack-open-directory.nvim']
lua_add = '''
-- Disable embeded plugins.
vim.api.nvim_set_var('loaded_netrwPlugin', 1)

require('hijack_open_directory').setup({
     filer = function(path) require('vfiler').start(path, {noremap = true, silent = true }) end
})

local opts = { noremap=true, silent=true }
--- open filer in window
vim.keymap.set('n', '<Leader>E', '<Cmd>VFiler -layout=none<CR>', opts)
--- " open filer in side tab
vim.keymap.set('n', '<Leader>e', '<Cmd>VFiler -layout=left<CR>', opts)
'''
lua_source = '''
--- Support operation two buffers file explorer
local action = require('vfiler/action')
require('vfiler/config').setup {
    options = {
        auto_resize = true,
        keep = true,
        name = 'explorer',
        columns = 'indent,icon,name,git',
        iconstring = '-',
        git = { enabled = true, untracked = true, ignored = true },
        width = 34,
        listed = false,
    },
    mappings = {
        ['<C-l>'] = action.reload,
        ['<C-s>'] = action.toggle_sort,
        ['N'] = action.new_file,
        ['K'] = action.new_directory,
        ['s'] = action.open_by_split,
        ['v'] = action.open_by_vsplit,
    },
}
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
lua_source = '''
require('rc.aerial')
'''


[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
lua_source = '''
local ddu_helper = require('rc.ddu')
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
lua_source = '''
require('rc.ddu-ui-ff')
'''
[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
lua_source = '''
require('rc.ddu-ui-filer')
'''
[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-dummy'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'
[[plugins]]
repo = 'k-ota106/ddu-source-marks'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'
[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
on_source = 'ddu.vim'
[[plugins]]
repo = 'https://github.com/shun/ddu-source-rg'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'
[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'
[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'
[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'
[[plugins]]
repo = '4513ECHO/ddu-source-colorscheme'
on_source = 'ddu.vim'
[[plugins]]
repo = 'lambdalisue/mr.vim'
on_event = ['BufNewFile', 'BufReadPre', 'BufWritePre']
lua_source = '''
require('rc.mr')
'''
[[plugins]]
repo = 'uga-rosa/ddu-filter-converter_devicon'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Milly/ddu-filter-kensaku'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Milly/ddu-filter-merge'
on_source = 'ddu.vim'
[[plugins]]
repo = 'gamoutatsumi/ddu-filter-converter_relativepath'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source = 'ddu.vim'
on_cmd = 'Ddu'
[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

# --- Asynchronous Completion Framwwork ---
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter']
lua_source = '''
require('rc.ddc')
'''

# ---- ddc ui ----
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = ['pum.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'
lua_source = '''
require('rc.pum')
'''

[[plugins]]
# to show lsp signature help
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
let g:signature_help_config = { 'contentsStyle': 'full', 'viewStyle': 'floating' }
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
depends = ['denops.vim']
hook_source = '''
call popup_preview#enable()
'''

#  ---- ddc source ----
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'https://github.com/uga-rosa/ddc-source-lsp-setup'
on_source = 'nvim-lspconfig'
lua_source = '''
require("ddc_source_lsp_setup").setup()
'''

[[plugins]]
repo = 'Shougo/ddc-source-shell-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

# ---- ddc filter ----
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# --- SKK ---
[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
lua_source = '''
require('rc.skkeleton')
'''

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
on_source = ['skkeleton']
lua_source = '''
require('skkeleton_indicator').setup{
	alwaysShown = false,
	ignoreFt = { 'ddu-ui-filter' },
}
'''

# --- Language Server Protocol ---
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason-lspconfig', 'neodev.nvim']
on_event = ['BufRead']
lua_source = '''
require('rc.nvim-lspconfig')
'''

[[plugins]]
repo = 'folke/neodev.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'https://github.com/soulis-1256/hoverhints.nvim'
lua_source = '''
require("hoverhints").setup({})
'''

# --- Snippets
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_filetypes = {}
'''

# snippets collections
[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
local mason = require('mason')
mason.setup({
  ui = { icons = { package_installed = "＊", package_pending = "∴", package_uninstalled = "×" } }
})
'''
[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
[[plugins]]
repo = "nvim-lua/plenary.nvim"

[[plugins]]
repo = 'tomato3713/ddu-source-joplin'
on_source = 'ddu.vim'
[[plugins]]
repo = 'tomato3713/ddu-kind-joplin'
on_source = 'ddu.vim'
[[plugins]]
repo = 'tomato3713/ddu-column-joplin'
on_source = 'ddu.vim'
