# --- Plugin Manager ---

[[plugins]]
repo = 'Shougo/dein.vim'
lua_add = '''
  require('rc.dein').setup_mapping()
'''

[[plugins]]
repo = 'haya14busa/dein-command.vim'
depends = ['dein.vim']
# on_cmd = ['Dein'] # TODO: lazy

# --- Framework && Library ---
[[plugins]]
repo = "nvim-lua/plenary.nvim"

[[plugins]]
repo = "https://github.com/uga-rosa/utf8.nvim"

# --- Key Mapping Helper ---
[[plugins]]
repo = 'folke/which-key.nvim'
lua_source = '''
require('which-key').setup {}
'''

# --- Rich UI
[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = ['notify']
lua_source = '''
require('notify').setup({
  background_colour = "#000000",
  max_width = math.floor(vim.opt.columns:get() * 0.3)
})

vim.notify = require('notify')
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'
lua_source = '''
require('dressing').setup()
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
lua_source = '''
require('nvim-web-devicons').setup()
'''

[[plugins]]
repo = 'https://github.com/goolord/alpha-nvim'
lua_source = '''
require'alpha'.setup(require'alpha.themes.startify'.config)
'''

[[plugins]]
repo = 'https://github.com/0xAdk/full_visual_line.nvim'
on_event = ['ModeChanged']
lua_source = '''
  require 'full_visual_line'.setup {}
'''

[[plugins]]
repo = 'https://github.com/lukas-reineke/indent-blankline.nvim'
on_event = ['BufReadPre', 'BufNewFile']
lua_source = '''
--  require('rc.indent_blankline')
'''

[[plugins]]
repo = 'https://github.com/shellRaining/hlchunk.nvim'
on_event = ['BufReadPre', 'BufNewFile']
lua_source = '''
  require('rc.hlchunk')
'''

# [[plugins]]
# repo = 'Shougo/deol.nvim'
# hook_source = '''
# " Should set g:deol#prompt_pattern.
# let g:deol#prompt_pattern = has('win32') ? '\f\+>' : '\w*% \?'
# if !has('win32')
# 	let g:deol#external_history_path = '~/.zsh_history'
# endif
#
# nnoremap <expr> <Space>s '<Cmd>Deol -edit<CR>'
# '''

# --- General Rich Text Editing ---
[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'https://github.com/monaqa/general-converter.nvim'
lua_source = '''
require('rc.general_converter')
'''

[[plugins]]
repo = 'karb94/neoscroll.nvim'
lua_source = '''
require('neoscroll').setup()
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
lua_source = '''
require('colorizer').setup()
'''

[[plugins]]
repo = 'folke/todo-comments.nvim'
depends = ['plenary.nvim']
lua_source = '''
require("todo-comments").setup({
	keywords = {
		FIX = {
			icon = "F", -- icon used for the sign, and in search results
			color = "error", -- can be a hex color, or a named color (see below)
			alt = { "FIXME", "BUG", "FIXIT", "ISSUE" }, -- a set of other keywords that all map to this FIX keywords
		},
		TODO = { icon = "T", color = "info" },
		HACK = { icon = "H", color = "warning" },
		WARN = { icon = "W", color = "warning", alt = { "WARNING", "XXX" } },
		PERF = { icon = "P", alt = { "OPTIM", "PERFORMANCE", "OPTIMIZE" } },
		NOTE = { icon = "N", color = "hint", alt = { "INFO" } },
	},
})
'''

[[plugins]]
repo = 'lambdalisue/mr.vim'
on_event = ['BufNewFile', 'BufReadPre', 'BufWritePre']
lua_source = '''
require('rc.mr')
'''

[[plugins]]
repo = 'https://github.com/Shougo/junkfile.vim'
hook_add = '''
  command! -nargs=0 JunkfileDiary call junkfile#open_immediately('%Y-%m-%d.md'->strftime())
  command! -nargs=0 JunkNote call junkfile#open_immediately('main.md')
'''

# --- Rich Code Editing ---
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'rgroli/other.nvim'
lua_source = '''
  require('rc.other-nvim')
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'mhartington/formatter.nvim'
hook_add = '''
  nnoremap <silent> <leader>F :Format<CR>
  nnoremap <silent> <leader>f :FormatWrite<CR>
'''
lua_source = '''
  require('rc.formatter')
'''

[[plugins]]
repo = 'danymat/neogen'
depends = ['nvim-treesitter']
lua_add = '''
  local opts = { noremap = true, silent = true }
  vim.api.nvim_set_keymap("n", "<Leader>nf", ":lua require('neogen').generate()<CR>", opts)
'''
lua_source = '''
  require('neogen').setup()
'''

# highlighting other uses of the word under the cursor
[[plugins]]
repo = 'https://github.com/RRethy/vim-illuminate'

[[plugins]]
repo = 'echasnovski/mini.nvim'
depends = ['nvim-ts-context-commentstring']
lua_source = '''
require('rc.mini')
'''

[[plugins]]
repo = 'https://github.com/nvim-treesitter/nvim-treesitter-context'
depends = ['nvim-treesitter']
lua_source = '''
require('treesitter-context').setup({ enable = false })
'''

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
depends = ['nvim-treesitter']
# on_cmd = ['TSContextToggle'] # TODO: lazy
lua_source = '''
vim.g.skip_ts_context_commentstring_module = true
require('ts_context_commentstring').setup {
	enable_autocmd = false,
}
'''

[[plugins]]
# use treesitter to autoclose and autorename html tag
repo = 'windwp/nvim-ts-autotag'
depends = ['nvim-treesitter']
lua_source = '''
require('nvim-ts-autotag').setup()
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'CursorHold']
merged = 0
hook_post_update = 'TSUpdate'
lua_source = '''
require('rc.treesitter')
'''

# --- Git ---
[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
lua_source = '''
require('rc.gitsigns')
'''

[[plugins]]
repo = 'ruifm/gitlinker.nvim'
depends = ['plenary.nvim']
lua_source = '''
require('rc.gitlinker')
'''

# --- File Exploer
[[plugins]]
repo = 'obaland/vfiler.vim'
# on_cmd = ['VFiler'] # TODO: lazy
lua_add = '''
-- Disable embeded plugins.
vim.api.nvim_set_var('loaded_netrw', 1)
vim.api.nvim_set_var('loaded_netrwPlugin', 1)

local opts = { noremap=true, silent=true }
--- open filer in window
vim.keymap.set('n', '<Leader>E', '<Cmd>VFiler -layout=none<CR>', opts)
--- " open filer in side tab
vim.keymap.set('n', '<Leader>e', '<Cmd>VFiler -layout=left<CR>', opts)
'''
lua_source = '''
--- Support operation two buffers file explorer
local action = require('vfiler/action')
require('vfiler/config').setup {
   options = {
       auto_resize = true,
       keep = true,
       name = 'explorer',
       columns = 'indent,icon,name,git',
       iconstring = '-',
       git = { enabled = true, untracked = true, ignored = true },
       width = 34,
       listed = false,
   },
   mappings = {
       ['<C-l>'] = action.reload,
       ['<C-s>'] = action.toggle_sort,
       ['N'] = action.new_file,
       ['K'] = action.new_directory,
       ['s'] = action.open_by_split,
       ['v'] = action.open_by_vsplit,
   },
}
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
lua_source = '''
require('rc.aerial')
'''

# --- Language Server Protocol ---
[[plugins]]
repo = 'williamboman/mason.nvim'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason.nvim', 'mason-lspconfig.nvim']
on_event = ['BufRead']
lua_source = '''
require('rc.nvim-lspconfig')
'''


[[plugins]]
repo = 'folke/neodev.nvim'
on_ft = ['lua']
on_source = 'nvim-lspconfig'
lua_source = '''
require("neodev").setup()
'''

[[plugins]]
repo = 'https://github.com/soulis-1256/eagle.nvim'
lua_source = '''
require("eagle").setup({})

vim.o.mousemoveevent = true
'''

# --- Snippets
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['friendly-snippets']
lua_add = '''
  vim.keymap.set({'i', 's'}, '<C-f>',  function()
      return vim.fn['vsnip#jumpable'](1) == 1 and '<Plug>(vsnip-jump-next)' or '<C-f>'
  end, { expr = true, noremap = false })
  vim.keymap.set({'i', 's'}, '<C-b>',  function()
      return vim.fn['vsnip#jumpable'](-1) == 1 and '<Plug>(vsnip-jump-prev)' or '<C-b>'
  end, { expr = true, noremap = false })
  
  -- vim.g.vsnip_filetypes = {}
  vim.g.vsnip_snippet_dir = vim.fn.expand('~/.config/nvim/snippets')
'''

# snippets collections
[[plugins]]
on_source = ['vim-vsnip']
repo = 'rafamadriz/friendly-snippets'

