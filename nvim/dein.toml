# --- Framework ---
[[plugins]]
repo = 'vim-denops/denops.vim'

# --- Colorscheme
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
colorscheme onedark
'''

# --- Rich Help ---
[[plugins]]
repo = 'folke/which-key.nvim'
lua_add = '''
require('which-key').setup {}
'''

# --- Faster UI Controll ---
[[plugins]]
repo = 'simeji/winresizer'

# --- Rich Text Edit ---
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <plug>(caw:zeropos:toggle)
vmap <Leader>c <plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

# --- Script Quick Runner
[[plugins]]
repo = 'thinca/vim-quickrun'

# --- Git ---
[[plugins]]
repo = 'airblade/vim-gitgutter'


# --- Rich Syntax Highlight ---
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_post_update = 'TSUpdate'
lua_source = '''
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "go", "c", "cpp", "markdown", "toml" },
  sync_install = false, -- install languages synchronously (only applied to `ensure_installed`)
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "vim" },  -- list of language that will be disabled
    additional_vim_regex_highlighting = false,
  },
  indent = {
      enable = true,
  }
}
'''

# --- File Exploer
[[plugins]]
repo = 'obaland/vfiler.vim'
lua_add = '''
--- Support operation two buffers file explorer
require('vfiler/config').setup {
    options = {
        auto_resize = true,
        name = 'explorer',
        columns = 'indent,icon,name,git,mode,size,time,space',
        git = { enabled = true, untracked = true, ignored = true },
        width = 30,
    },
}
local opts = { noremap=true, silent=true }
--- open filer in window
vim.keymap.set('n', '<Leader>E', '<Cmd>VFiler -layout=none<CR>', opts)
--- " open filer in side tab
vim.keymap.set('n', '<Leader>e', '<Cmd>VFiler -layout=left<CR>', opts)
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
" Support LSP
nmap <space>v :Vista nvim_lsp<CR>
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [{'name':'file','params':{}},{'name':'mr'},{'name':'register'},{'name':'buffer'}],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'filterParams': { 'matcher_substring' : { 'highhtMatched': 'Search' } },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \ })

"ddu-key-setting
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  nnoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  inoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  inoremap <buffer> <C-j>
  \ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')+1,0)")<CR>
  inoremap <buffer> <C-k>
  \ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')-1,0)")<CR>
endfunction

"ddu keymapping.
"show history list
nnoremap <silent> ,m :<C-u>Ddu mr<CR>
"show buffer list
nnoremap <silent> ,b :<C-u>Ddu buffer<CR>
"show register list
nnoremap <silent> ,r :<C-u>Ddu register<CR>
"create new file
nnoremap <silent> ,n :<C-u>Ddu file -source-param-new -volatile<CR>
"show file list
nnoremap <silent> ,f :<C-u>Ddu file<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
[[plugins]]
repo = 'Shougo/ddu-source-file'
[[plugins]]
repo = 'Shougo/ddu-source-register'
[[plugins]]
repo = 'kuuote/ddu-source-mr'
[[plugins]]
repo = 'lambdalisue/mr.vim'
[[plugins]]
repo = 'shun/ddu-source-buffer'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo = 'Shougo/ddu-commands.vim'
[[plugins]]
repo = 'Shougo/ddu-kind-file'

# --- Asynchronous Completion Framwwork ---
[[plugins]]
repo = 'Shougo/ddc.vim'
hook_source = '''
  " call pum#set_option({
  "   \ 'max_width': 100,
  "   \ 'padding': v:true,
  "   \ })

  call ddc#custom#patch_global('ui', 'pum')
  call ddc#custom#patch_global('sources', ['skkeleton', 'nvim-lsp', 'around', 'file'])
  call ddc#custom#patch_global('sourceOptions',
    \ {
    \   '_': {
    \     'ignoreCase': v:true,
    \     'matchers': ['matcher_fuzzy'],
    \     'sorters': ['sorter_fuzzy'],
    \     'converters': ['converter_fuzzy']
    \   },
    \   'around': {
    \     'mark': 'around',
    \   },
    \   'nvim-lsp': {
    \     'mark': 'lsp',
    \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \   },
    \   'skkeleton': {
    \     'mark': 'skk',
    \     'matchers': ['skkeleton'],
    \     'sorters': [],
    \     'minAutoCompleteLength': 1,
    \     'isVolatile': v:true,
    \   },
    \   'file': {
    \     'mark': 'file',
    \     'forceCompletionPattern': '\S/\S*',
    \     'isVolatile': v:true,
    \   },
    \ })

  call ddc#custom#patch_global('autoCompleteEvents',
      \ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged'])
  nnoremap :       <Cmd>call CommandlinePre()<CR>:

  function! CommandlinePre() abort
    cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    call ddc#custom#patch_buffer('cmdlineSources', ['cmdline', 'cmdline-history', 'skkeleton', 'around', 'file'])
    call ddc#custom#patch_buffer('sourceOptions',
      \ {
      \   '_': {
      \     'matchers': ['matcher_fuzzy'],
      \     'sorters': ['sorter_fuzzy'],
      \     'converters': ['converter_fuzzy']
      \   },
      \   'cmdline': {
      \     'mark': 'cmd',
      \   },
      \   'cmdline-history': {
      \     'mark': 'cmd hist',
      \   },
      \ })

    autocmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd InsertEnter <buffer> ++once call CommandlinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
  endfunction
  function! CommandlinePost() abort
    silent! cunmap <Tab>
    silent! cunmap <S-Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <C-y>
    silent! cunmap <C-e>

    " Restore sources
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif
  endfunction

  call ddc#enable()
'''

# ---- ddc ui ----
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'
hook_source = '''
inoremap <C-n> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y> <Cmd>call pum#map#confirm()<CR>
inoremap <C-e> <Cmd>call pum#map#cancel()<CR>
inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_source = '''
call popup_preview#enable()
'''

#  ---- ddc source ----
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

# ---- ddc filter ----
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# --- SKK ---
[[plugins]]
repo = 'vim-skk/skkeleton'
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
let s:skk_dir = expand('~/.config/skk')
let s:global_skk_jisyo = s:skk_dir . '/SKK-JISYO.L'
let s:user_skk_jisyo = s:skk_dir . '/user-dict'
let s:skk_dict_url = 'http://openlab.jp/skk/skk/dic/SKK-JISYO.L'

" download skk dictionary file
if !isdirectory(s:skk_dir)
    call mkdir(s:skk_dir)
    execute '!curl' s:skk_dict_url '-o' expand(s:global_skk_jisyo)
endif

function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'eggLikeNewline': v:true,
    \ 'keepState': v:false,
    \ 'globalJisyo': s:global_skk_jisyo,
    \ 'userJisyo': s:user_skk_jisyo,
    \ 'immediatelyJisyoRW': v:false,
    \ 'markerHenkan': '|',
    \ 'markerHenkanSelect': '?'
    \ })
  call skkeleton#register_kanatable('rom', {
    \ "z\<Space>": ["\u3000", ''],
    \ "z.": ["．", ''],
    \ "z,": ["，", '']
    \ })
endfunction
augroup skkeleton-initialize-pre
  autocmd!
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
'''

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
lua_source = '''
require('skkeleton_indicator').setup{}
'''

# --- Language Server Protocol ---
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
lua_source= '''
local nvim_lsp = require('lspconfig')
local on_attach = function(client,bufnr)

-- LSPの警告フォーマット
-- ref: https://dev.classmethod.jp/articles/eetann-change-neovim-lsp-diagnostics-format/
vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
  virtual_text = {
    format = function(diagnostic)
      return string.format('%s (%s: %s)', diagnostic.message, diagnostic.source, diagnostic.code)
    end,
  },
})

local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<Cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', 'gs', '<Cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', 'gr', '<Cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', 'gx', '<Cmd>lua vim.lsp.buf.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', 'g[', '<Cmd>lua vim.lsp.buf.diagnostic.show_prev()<CR>', opts)
  buf_set_keymap('n', 'g]', '<Cmd>lua vim.lsp.buf.diagnostic.show_next()<CR>', opts)
end

local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
  local opts = {}
  opts.on_attach = on_attach
  server:setup(opts)
  vim.cmd [[do User LspAttachBuffers]]
end)
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

# [[plugins]]
# repo = '~/repos/dps-joplin'
# hook_add = '''
# let g:joplin_token = $JOPLIN_TOKEN
# let g:joplin_debug = v:true
# '''
