[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
hook_source = '''
  call ddc#custom#patch_global('sources', ['skkeleton', 'nvim-lsp', 'around'])
  call ddc#custom#patch_global('sourceOptions',
    \ {
    \   '_': {
    \     'matchers': ['matcher_head'],
    \     'sorters': ['sorter_rank']
    \   },
    \   'around': {
    \     'mark': 'around',
    \   },
    \   'nvim-lsp': {
    \     'mark': 'lsp',
    \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \   },
    \   'skkeleton': {
    \     'mark': 'skk',
    \     'matchers': ['skkeleton'],
    \     'minAutoCompleteLength': 1,
    \   },
    \ })
  call ddc#enable()
'''

# start ddc sources
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = ['denops.vim']
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = ['denops.vim']
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
on_source = 'ddc.vim'
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
call skkeleton#config({
  \ 'eggLikeNewline': v:true,
  \ 'keepState': v:false,
  \ 'globalJisyo': '~/.config/skk/SKK-JISYO.L',
  \ 'userJisyo': '~/.config/skk/user-dict',
  \ 'immediatelyJisyoRW': v:false,
  \ 'markerHenkan': '|',
  \ 'markerHenkanSelect': '?'
  \ })
call skkeleton#register_kanatable('rom', {
  \ "z\<Space>": ["\u3000", ''],
  \ "z.": ["．", ''],
  \ "z,": ["，", '']
  \ })
'''
# end ddc sources

# start ddc filters
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'
# start ddc filters

# start LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source= '''
lua << EOF
local nvim_lsp = require('lspconfig')
local on_attach = function(client,bufnr)
local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<Cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', 'gs', '<Cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', 'gr', '<Cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', 'gx', '<Cmd>lua vim.lsp.buf.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', 'g[', '<Cmd>lua vim.lsp.buf.diagnostic.show_prev()<CR>', opts)
  buf_set_keymap('n', 'g]', '<Cmd>lua vim.lsp.buf.diagnostic.show_next()<CR>', opts)
end

local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
  local opts = {}
  opts.on_attach = on_attach
  server:setup(opts)
  vim.cmd [[do User LspAttachBuffers]]
end)
EOF
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'
# end LSP

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_post_update = 'TSUpdate'
hook_source = '''
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "go", "c", "cpp", "markdown", "toml" },
  sync_install = false, -- install languages synchronously (only applied to `ensure_installed`)
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "vim" },  -- list of language that will be disabled
    additional_vim_regex_highlighting = false,
  },
  indent = {
      enable = true,
  }
}
'''

# start fuzzy finder
[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
nmap ;f <Cmd>call ddu#start({})<CR>

call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [{'name': 'file_rec', 'params': {}}],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   }
    \ })
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
depends = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-kind-file'
depends = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-column-filename'
depends = ['ddu.vim']

[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
let g:translate_target = 'ja'
let g:translate_popup_window = 0
let g:translate_winsize = 5
vmap t <Plug>(VTranslate)
'''
